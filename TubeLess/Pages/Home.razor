@page "/"
@inject IJSRuntime jsRuntime
@inject IConfiguration Configuration

<PageTitle>Home</PageTitle>

<h1>Hello!</h1>
<p>Welcome to TubeLess.</p>

<button class="btn btn-primary" onclick="waitReady(search)">Search</button>
<div class="results"></div>

<script>
  let promiseResolve, promiseReject;
  const gapiPromise = new Promise((resolve, reject) => {
    promiseResolve = resolve;
    promiseReject = reject;
  })

  function loadGAPI(apiKey) {
    gapi.load("client", () => {
      gapi.client.setApiKey(apiKey);
      gapi.client.load("https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest")
        .then(
          () => { console.log("GAPI client loaded for API"); promiseResolve(); },
          (err) => { console.error("Error loading GAPI client for API", err); promiseReject(err); })
    });
  }

  function waitReady(action) {
    return gapiPromise.then(action);
  }

  function search() {
    const request = gapi.client.youtube.search.list({
      part: "snippet",
      type: "video",
      q: "dotnet"
    });

    request.execute((response) => {
      document.getElementsByClassName("results")[0].innerHTML = JSON.stringify(response.result);
    });
  }
</script>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
      if (!firstRender) {
        return;
      }
      await jsRuntime.InvokeVoidAsync("loadGAPI", Configuration["apiKey"]);
    }
}
